generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Client and supplier uses the same model
model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  username String   @unique
  address  Address?
  role     Role     @default(CLIENT)
  email    String   @unique
  password String
  login    Boolean? @default(false)
  cards    Card[]
  cart     Cart[]
  orders   Order[]
  reviews  Review[]
}

// Order model will show current and past orders
model Order {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  created_at   DateTime     @default(now())
  total_amount Float
  status       Order_Status @default(PENDING)
  items        Order_Item[]
  payment      Payment[]
  user_id      String       @db.ObjectId
  user         User         @relation(fields: [user_id], references: [id])
}

// Products listed in the order table
model Order_Item {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity   Int
  price      Float
  order_id   String  @db.ObjectId
  orders     Order   @relation(fields: [order_id], references: [id])
  product_id String  @db.ObjectId
  product    Product @relation(fields: [product_id], references: [id])
}

// Product Model
model Product {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  stock       Int
  images      String[]
  cart_items  Cart_Item[]
  orders      Order_Item[]
  reviews     Review[]
  category_id String       @db.ObjectId
  category    Category     @relation(fields: [category_id], references: [id])
  discount_id String?      @db.ObjectId
  discount    Discount?    @relation(fields: [discount_id], references: [id])
}

// The items added to cart will be listed here
model Cart {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  favourite Boolean     @default(false)
  cart_name String?
  products  Cart_Item[]
  user_id   String      @db.ObjectId
  user      User        @relation(fields: [user_id], references: [id])
}

// Products added to cart by client
model Cart_Item {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity   Int
  cart_id    String  @db.ObjectId
  cart       Cart    @relation(fields: [cart_id], references: [id])
  product_id String  @db.ObjectId
  product    Product @relation(fields: [product_id], references: [id])
}

// Category for products
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  products    Product[]
}

// Review for a product
model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  user_id    String   @db.ObjectId
  user       User     @relation(fields: [user_id], references: [id])
  product_id String   @db.ObjectId
  product    Product  @relation(fields: [product_id], references: [id])
}

// Discount for products
model Discount {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  code         String    @unique
  percentage   Float
  products     Product[]
  promotion_id String    @db.ObjectId
  promotion    Promotion @relation(fields: [promotion_id], references: [id])
}

// Advertisement for discounts
model Promotion {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  start_date DateTime
  end_date   DateTime
  discount   Discount[]
}

// Payment model before purchase
model Payment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  payment_method String
  amount         Float
  status         Float
  created_at     DateTime @default(now())
  order_id       String   @db.ObjectId
  order          Order    @relation(fields: [order_id], references: [id])
}

// All the states the order can be in
enum Order_Status {
  PENDING
  ACCEPTED
  PROCESSING
  REJECTED
  CANCELLED
  CLOSED
  SHIPPING
  SHIPPED
  DELIVERING
  DELIVERED
}

// User Role Types
enum Role {
  CLIENT
  SELLER
  ADMIN
}

// Credit Card Structure
type Card {
  name        String
  card_number Int
  exp_date    String
  cvv         Int
}

// Address structure
type Address {
  street  String
  city    String
  state   String
  zip     String
  country String
}
